1. 다음 어셈블리코드를 머신코드로 번역하시오. (C 코드는 참고용) 

== 

// C 코드 

clear1(int arrary[], int size) {

int i;

    for (i = 0; i < size; i += 1)

      array[i] = 0;

}

// 어셈블리 코드 

clear1:

addi x5, x0, 0    // 000000000000 | 00000 | 000 | 00101 | 0010011

loop:

slli x6,x5,2  // 000000000010 | 00101 | 001 | 00110 | 0010011

add x7,x10,x6  // 0000000 | 00110 | 01010 | 000 | 00111 | 0110011

sw x0,0(x7)    // 0000000 | 00000 | 00111 | 010 | 00000 | 0100011

addi x5,x5,1    // 000000000001 | 00101 | 000 | 00101 | 0010011

blt x5,x11,loop    //  1111111 | 01011 | 00101 | 100 | 01101 | 1100011


2. 다음 머신 코드를 어셈블리 코드로 변경하시오. 

0: 017b1663     // bne x22, x23, 12

4: 015a09b3     // add x19, x20, x21

8: 00000463     // beq x0, x0, 8

0000000c <Else>:    // 

c: 415a09b3     // sub x19, x20, x21

00000010 <Exit>:    // 

10: 01300533     // add x10, x1, x2

3. RISC-V 레지스터를 128개로 늘리고, 명령어는 현재보다 4배 많게 확장하려고 한다.

(1)   이렇게 확장한다면, R-타입 명령어의 각각의 비트 필드 크기에 어떤 영향을 미치게 되는가?

RISC-V는 32개의 레지스터를 사용하며, 각 레지스터를 지정하기 위해 5비트(2^5=32)를 사용한다. 
R-type 명령어는 레지스터를 128개로 확장하기 위해서는 7비트(2^7=128)가 필요할 것이다. 이는 rs1, rs2, rd 필드에 각각 적용된다.
RISC-V 명령어는 32비트 길이를 기본으로 한다. 레지스터 수가 확장된다면, 추가 비트를 수용하기 위해 명령어 길이를 확장해야 한다. 
그러나 기존 32비트 길이를 유지하려면 다른 필드의 크기를 조정하거나 명령어 포맷을 다르게 설계해야 할 수 있다. 
명령어가 확장된다면 새로운 연산과 기능이 추가됨을 의미하므로 새로운 opcode와 funct 필드가 도입될 가능성이 크다. 

(2)   이렇게 확장한다면, I-타입 명령어의 각각의 비트 필드 크기에 어떤 영향을 미치게 되는가?

I-type 명령어는 주로 imm 값을 포함하는 연산과 load 명령에 사용된다. 따라서 레지스터를 128개로 확장하게 된다면 rs1과 rd 필드에 영향을 미치게 된다.
imm 필드는 12비트를 차지하고 있는데 레지스터가 확장되면 표준 32비트 명령어의 길이를 유지하고자 할 경우에는 imm 필드 크기가 줄어들 수 있다. 
이는 imm 값이 표현할 수 있는 범위가 축소됨과 동시에 특정 연산에서 유용성이 감소할 수 있다. 
명령어가 확장된다는 것은 새 연산과 기능의 추가를 의미하므로 opcode 필드를 재조정하거나 새로운 funct 필드를 도입하여 다양한 연산을 더 세밀하게 정할 수 있도록 한다.

(3)   제안한 두가지 확장으로 인하여, RISC-V 어셈블리 프로그램 중 일부는 길이가 길어졌다고 한다. 이유는 무엇이었을까? 

레지스터 필드가 5비트에서 7비트로 확장되면서 각 명령어에서 레지스터를 지정하는 데 더 많은 비트가 요구될 것이다. 
이는 특히 레지스터를 많이 사용하는 복잡한 연산에서 더 많은 공간을 차지하게 만든다. 
명령어의 길이가 새로 도입되는 연산과 기능을 수용하기 위해 기존 32비트에서 더 길어질 수 있다. 
이는 프로그램 전체 메모리 크기를 증가시킬 수 있다.
이렇게 명령어 포맷의 확장, 새로운 기능의 추가, 프로그램의 복잡성 증가 등 전체적으로 확장되면서 개별 명령어와 전체 프로그램의 길이를 증가시킬 수 있다.

(4)   제안한 두가지 확장으로 인하여, RISC-V 어셈블리 프로그램 중 일부는 길이가 짧아졌다고 한다. 이유는 무엇이었을까? 

확장된 레지스터 필드는 개발자가 사용 가능한 더 많은 직접전인 레지스터 액세스를 제공한다. 
이는 중간 결과 저장을 위한 불필요한 메모리 접근을 줄여 더 효율적 연산을 가능하게 한다. 
따라서 더 많은 레지스터를 사용하게 될 경우 직접적인 메모리 접근 대신 레지스터 간의 연산을 통해 최적화가 가능해진다.
명령어가 확장되면 보다 직접적이고 효율적인 수행을 가능하게 하는 명령어가 포함될 수 있다. 
이는 복잡한 작업을 더 적은 수의 명령어로 수행 가능하게 한다.
레지스터 수의 증가와 명령어 확장은 프로그램의 다양한 부분에서 레지스터 할당 및 명령어 선택을 더 효율적이고 직접적으로 수행할 수 있도록 하여 프로그램의 이를 줄일 수 있게 된다.
 
